# Copyright 2021 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

provider "google" {
  project = var.projectId
  region  = var.region
}

locals {
  repo_root = abspath("${path.module}/../..")
  src_root  = abspath("${local.repo_root}/cloudrun-malware-scanner")
}

module "apis" {
  source = "./apis"
  count  = var.enable_apis ? 1 : 0
}

resource "google_service_account" "malware_scanner_sa" {
  account_id   = var.service_name
  display_name = "Service Account for malware scanner cloud run service"
  depends_on   = [module.apis]
}

resource "google_project_iam_member" "malware_scanner_iam" {
  for_each = toset(["roles/monitoring.metricWriter", "roles/run.invoker", "roles/eventarc.eventReceiver"])
  project  = var.projectId
  role     = each.value
  member   = "serviceAccount:${google_service_account.malware_scanner_sa.email}"
}

data "google_storage_project_service_account" "gcs_account" {}

resource "google_project_iam_binding" "gcs_sa_pubsub_publish" {
  project = var.projectId
  role    = "roles/pubsub.publisher"
  members = ["serviceAccount:${data.google_storage_project_service_account.gcs_account.email_address}"]
}

resource "google_service_account" "build_service_account" {
  account_id   = "${var.service_name}-build"
  display_name = "Service Account for malware scanner cloud run service"
  depends_on   = [module.apis]
}

resource "google_project_iam_binding" "build_iam" {
  for_each = toset(["roles/storage.objectViewer", "roles/logging.logWriter", "roles/artifactregistry.writer"])
  project  = var.projectId
  role     = each.value
  members  = ["serviceAccount:${google_service_account.build_service_account.email}"]
}


# Create demo buckets if specified
module "demo_buckets" {
  source                      = "./demo_buckets"
  count                       = var.create_demo_buckets ? 1 : 0
  projectId                   = var.projectId
  location                    = var.bucket_location
  service_account_email       = google_service_account.malware_scanner_sa.email
  uniform_bucket_level_access = var.uniform_bucket_level_access
  depends_on                  = [module.apis]
}

resource "google_artifact_registry_repository" "repo" {
  location      = var.region
  repository_id = var.service_name
  description   = "Image registry for Malware Scanner"
  format        = "DOCKER"
  depends_on    = [module.apis]
}

resource "google_storage_bucket" "cvd_mirror_bucket" {
  name                        = var.cvd_mirror_bucket
  location                    = var.bucket_location
  uniform_bucket_level_access = var.uniform_bucket_level_access
  depends_on                  = [module.apis]
}

resource "google_storage_bucket_iam_binding" "cvd_mirror_bucket_sa_binding" {
  bucket = google_storage_bucket.cvd_mirror_bucket.name
  role   = "roles/storage.admin"
  members = [
    "serviceAccount:${google_service_account.malware_scanner_sa.email}",
  ]
}

# perform an update/initial load of mirror bucket
resource "null_resource" "populate_cvd_mirror" {
  provisioner "local-exec" {
    command = join(" ; ", [
      "echo '\n\nPopulating CVD Mirror bucket\n\n'",
      "python3 -m venv pyenv",
      ". pyenv/bin/activate",
      "pip3 install crcmod cvdupdate",
      "./updateCvdMirror.sh '${var.cvd_mirror_bucket}'"
    ])
    interpreter = ["/bin/bash", "-x", "-e"]
    working_dir = local.src_root
  }
  depends_on = [google_storage_bucket.cvd_mirror_bucket]
}
